@startuml
 
' style tweaks to make the diagram a little more readable
skinparam {
	Style strictuml
	RoundCorner 8
 
	Sequence {
		' make activations yellow too
		LifeLineBackgroundColor #FDFDCD
 
		' make stereotypes less ugly
		Stereotype {
			Font {
				Size 11
				Style plain
			}
		}
	}
 
	DatabaseBorderColor #A80036
 
}
 
title Edit Product
 
actor User as user
participant "Main" as main << main >>
participant "MainMenu" as menu << frame >>
participant "ProductReportDialog" as report << dialog >>
participant "ProductDAO" as dao << DAO >>
participant "ProductDialog" as editor << dialog >>
participant "ValidationHelper" as validator
participant "SimpleListModel\n:model" as model

database "Database" as db
 
create menu
main -> menu : « create »
 
user -> menu : clicks 'View Products'
activate menu
 
create report
menu -> report : « create »
 
activate report
create dao
report -> dao: « create »
 
 
note over report: as shown in\n'View Products'\ndiagram
user <-- report : list of products displayed
 
deactivate report
 
user -> report++ : selects a product in the list
report--
 
user -> report : clicks 'Edit' button
activate report
 
report -> report : jList.getSelectedValue() : product
 
create editor
report -> editor++ : « create(product) »

editor -> dao++ : getCategories()

dao -> db++ : select distinct product_category from product
return categories

dao--

create model
editor -> model : « create »

editor -> model++ : updateItems(categories) : model

model--

editor -> editor : cmbCategory.setModel(model)
 
create validator
editor -> validator : « create »
 
 
 
 
' your code goes here
'note over editor #FF6666 : what happens here?

editor -> validator++ : addTypeFormatter() for txtPrice and txtQuantity

validator--
 
 
 
 
 
 
user <-- editor : product details displayed, ready for editing
deactivate editor
 
user -> editor++ : edits product details
editor--
 
user -> editor : clicks 'Save' button
editor++
editor -> validator++ : isValid(product)
return valid
opt if valid
note over editor: existing save code as\nshown in 'Add Product'\ndiagram
end
editor --> report
editor--
destroy editor
 
report -> dao++ : getProducts()
return products
 
report -> report : productsModel.updateItems(products)
 
note left: updated product\ndisplayed in report
 
@enduml